// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   chalk
//   util

declare module 'debug-color' {
    /**
      * Created by user on 2018/7/2/002.
      */
    import { Console2, IOptions, InspectOptions } from 'debug-color/lib/node';
    export { IOptions, InspectOptions };
    export { Console2, Console2 as Console };
    export const console: Console2;
    export default console;
}

declare module 'debug-color/lib/node' {
    /**
        * Created by user on 2018/7/2/002.
        */
    import { Chalk, Level } from 'chalk';
    import * as util from 'util';
    import { SYM_CHALK, SYM_CONSOLE } from 'debug-color/lib/val';
    import { SYM_DATA } from 'debug-color/lib/val';
    import { IStyles } from 'debug-color/lib/styles';
    export { InspectOptions } from 'util';
    export interface IOptions {
            /**
                * enable log display or not
                */
            enabled?: boolean;
            /**
                * show label string
                */
            label?: boolean | string[];
            /**
                * show time label
                */
            time?: boolean;
            /**
                * set default inspectOptions
                */
            inspectOptions?: util.InspectOptions;
            /**
                * set color style
                */
            colors?: {
                    debug?: any;
                    error?: any;
                    info?: any;
                    log?: any;
                    trace?: any;
                    warn?: any;
                    success?: any;
                    ok?: any;
                    [k: string]: string | Chalk | IChalkLike;
            };
            /**
                * check is node.js console
                */
            readonly stream?: boolean;
    }
    export const defaultColors: IOptions["colors"];
    export interface Console2 extends Console, IStyles {
            (...argv: any[]): void;
            [SYM_CONSOLE]: Console;
            [SYM_CHALK]: Chalk;
            [SYM_DATA]: IOptions;
    }
    export class Console2 {
            constructor(target?: Console, options?: IOptions);
            chalk: Chalk;
            levelColor: Level;
            enabledColor: boolean;
            inspectOptions: util.InspectOptions;
            enabled: boolean;
            setOptions(options: IOptions): this;
            withOptions(options: IOptions): this;
            protected _clone(): this;
            protected _chalkStyleProp(name: any): this;
            protected _logFormat(format: any, ...args: any[]): string;
            success(...argv: any[]): any;
            ok(...argv: any[]): any;
            fail(...argv: any[]): any;
            protected _log(name: string, argv: any, failBack?: string): any;
            protected _chalkStyleMethod(name: any): (...argv: any[]) => any;
            protected _time(): any;
    }
    export interface IChalkLike {
            (string: any): string;
            (string: any, ...argv: any[]): string;
            (...argv: any[]): string;
    }
    export default Console2;
}

declare module 'debug-color/lib/val' {
    /**
      * Created by user on 2018/6/26/026.
      */
    export const SYM_DEBUG_CONSOLE: unique symbol;
    export const SYM_CHALK: unique symbol;
    export const SYM_CONSOLE: unique symbol;
    export const SYM_EVENT: unique symbol;
    export const SYM_DATA: unique symbol;
    import * as val from 'debug-color/lib/val';
    export default val;
}

declare module 'debug-color/lib/styles' {
    /**
      * Created by user on 2018/6/26/026.
      */
    import chalk from 'chalk';
    export { chalk };
    export const styleNames: string[];
    export const styleNamesFn: string[];
    export interface IStyles {
        rgb(r: number, g: number, b: number): this;
        hsl(h: number, s: number, l: number): this;
        hsv(h: number, s: number, v: number): this;
        hwb(h: number, w: number, b: number): this;
        bgHex(color: string): this;
        bgKeyword(color: string): this;
        bgRgb(r: number, g: number, b: number): this;
        bgHsl(h: number, s: number, l: number): this;
        bgHsv(h: number, s: number, v: number): this;
        bgHwb(h: number, w: number, b: number): this;
        hex(color: string): this;
        keyword(color: string): this;
        readonly reset: this;
        readonly bold: this;
        readonly dim: this;
        readonly italic: this;
        readonly underline: this;
        readonly inverse: this;
        readonly hidden: this;
        readonly strikethrough: this;
        readonly visible: this;
        readonly black: this;
        readonly red: this;
        readonly green: this;
        readonly yellow: this;
        readonly blue: this;
        readonly magenta: this;
        readonly cyan: this;
        readonly white: this;
        readonly gray: this;
        readonly grey: this;
        readonly blackBright: this;
        readonly redBright: this;
        readonly greenBright: this;
        readonly yellowBright: this;
        readonly blueBright: this;
        readonly magentaBright: this;
        readonly cyanBright: this;
        readonly whiteBright: this;
        readonly bgBlack: this;
        readonly bgRed: this;
        readonly bgGreen: this;
        readonly bgYellow: this;
        readonly bgBlue: this;
        readonly bgMagenta: this;
        readonly bgCyan: this;
        readonly bgWhite: this;
        readonly bgBlackBright: this;
        readonly bgRedBright: this;
        readonly bgGreenBright: this;
        readonly bgYellowBright: this;
        readonly bgBlueBright: this;
        readonly bgMagentaBright: this;
        readonly bgCyanBright: this;
        readonly bgWhiteBright: this;
    }
    import * as styles from 'debug-color/lib/styles';
    export default styles;
}

