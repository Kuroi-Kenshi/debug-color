"use strict";
/**
 * Created by user on 2018/6/29/029.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const env_bool_1 = require("env-bool");
function isForceColor(env) {
    if (typeof env === 'undefined' && process) {
        env = process.env;
    }
    let forceColor = env && env_bool_1.default(env.FORCE_COLOR, true);
    return forceColor;
}
exports.isForceColor = isForceColor;
function isSupportsColor() {
    return chalk_1.default.supportsColor.level;
}
exports.isSupportsColor = isSupportsColor;
function createFnChalkByConsole(console) {
    return function chalkByConsole(cb, 
    // @ts-ignore
    _console = console) {
        return cb(_console.chalk, _console);
    };
}
exports.createFnChalkByConsole = createFnChalkByConsole;
function createChalkStyleLog(console, name, failBack = 'log') {
    if (!name || typeof name !== 'string' || name in console) {
        throw TypeError(`name is not allow in target console`);
    }
    if (!failBack || typeof failBack !== 'string' || failBack in console) {
        throw TypeError(`failBack is not allow in target console`);
    }
    // @ts-ignore
    if (typeof console._log !== 'function') {
        throw TypeError(`input console not a Console2 like object`);
    }
    return function chalkStyleLog(...argv) {
        // @ts-ignore
        return console._log(name, argv, failBack);
    };
}
exports.createChalkStyleLog = createChalkStyleLog;
function hasConsoleStream(target) {
    return !!(target._stdout && target._stderr);
}
exports.hasConsoleStream = hasConsoleStream;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILGlDQUFxQztBQUNyQyx1Q0FBK0I7QUFHL0IsU0FBZ0IsWUFBWSxDQUFDLEdBQUk7SUFFaEMsSUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLElBQUksT0FBTyxFQUN6QztRQUNDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0tBQ2xCO0lBRUQsSUFBSSxVQUFVLEdBQUcsR0FBRyxJQUFJLGtCQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUV2RCxPQUFPLFVBQVUsQ0FBQztBQUNuQixDQUFDO0FBVkQsb0NBVUM7QUFFRCxTQUFnQixlQUFlO0lBRTlCLE9BQU8sZUFBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUE7QUFDakMsQ0FBQztBQUhELDBDQUdDO0FBRUQsU0FBZ0Isc0JBQXNCLENBQXNCLE9BQVc7SUFFdEUsT0FBTyxTQUFTLGNBQWMsQ0FBNkIsRUFBeUM7SUFDbkcsYUFBYTtJQUNiLFdBQWMsT0FBTztRQUVyQixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3BDLENBQUMsQ0FBQTtBQUNGLENBQUM7QUFSRCx3REFRQztBQUVELFNBQWdCLG1CQUFtQixDQUFzQixPQUFXLEVBQUUsSUFBWSxFQUFFLFFBQVEsR0FBRyxLQUFLO0lBRW5HLElBQUksQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksSUFBSSxPQUFPLEVBQ3hEO1FBQ0MsTUFBTSxTQUFTLENBQUMscUNBQXFDLENBQUMsQ0FBQTtLQUN0RDtJQUVELElBQUksQ0FBQyxRQUFRLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxPQUFPLEVBQ3BFO1FBQ0MsTUFBTSxTQUFTLENBQUMseUNBQXlDLENBQUMsQ0FBQTtLQUMxRDtJQUVELGFBQWE7SUFDYixJQUFJLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLEVBQ3RDO1FBQ0MsTUFBTSxTQUFTLENBQUMsMENBQTBDLENBQUMsQ0FBQTtLQUMzRDtJQUVELE9BQU8sU0FBUyxhQUFhLENBQUMsR0FBRyxJQUFJO1FBRXBDLGFBQWE7UUFDYixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUMxQyxDQUFDLENBQUE7QUFDRixDQUFDO0FBdkJELGtEQXVCQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLE1BQWtDO0lBRWxFLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUhELDRDQUdDO0FBRUQsa0JBQWUsT0FBa0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTgvNi8yOS8wMjkuXG4gKi9cblxuaW1wb3J0IGNoYWxrLCB7IExldmVsIH0gZnJvbSAnY2hhbGsnO1xuaW1wb3J0IGVudkJvb2wgZnJvbSAnZW52LWJvb2wnO1xuaW1wb3J0IENvbnNvbGUyLCB7IElDb25zb2xlV2l0aFN0cmVhbSB9IGZyb20gJy4vbm9kZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZvcmNlQ29sb3IoZW52Pyk6IGJvb2xlYW4gfCBudW1iZXIgfCBMZXZlbFxue1xuXHRpZiAodHlwZW9mIGVudiA9PT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcylcblx0e1xuXHRcdGVudiA9IHByb2Nlc3MuZW52O1xuXHR9XG5cblx0bGV0IGZvcmNlQ29sb3IgPSBlbnYgJiYgZW52Qm9vbChlbnYuRk9SQ0VfQ09MT1IsIHRydWUpO1xuXG5cdHJldHVybiBmb3JjZUNvbG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdXBwb3J0c0NvbG9yKClcbntcblx0cmV0dXJuIGNoYWxrLnN1cHBvcnRzQ29sb3IubGV2ZWxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZuQ2hhbGtCeUNvbnNvbGU8Q0kgZXh0ZW5kcyBDb25zb2xlMj4oY29uc29sZTogQ0kpXG57XG5cdHJldHVybiBmdW5jdGlvbiBjaGFsa0J5Q29uc29sZTxSLCBDIGV4dGVuZHMgQ29uc29sZTIgPSBDST4oY2I6IChjaGFsazogQ1tcImNoYWxrXCJdLCBfY29uc29sZTogQykgPT4gUixcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0X2NvbnNvbGU6IEMgPSBjb25zb2xlKTogUlxuXHR7XG5cdFx0cmV0dXJuIGNiKF9jb25zb2xlLmNoYWxrLCBfY29uc29sZSlcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2hhbGtTdHlsZUxvZzxDSSBleHRlbmRzIENvbnNvbGUyPihjb25zb2xlOiBDSSwgbmFtZTogc3RyaW5nLCBmYWlsQmFjayA9ICdsb2cnKVxue1xuXHRpZiAoIW5hbWUgfHwgdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUgaW4gY29uc29sZSlcblx0e1xuXHRcdHRocm93IFR5cGVFcnJvcihgbmFtZSBpcyBub3QgYWxsb3cgaW4gdGFyZ2V0IGNvbnNvbGVgKVxuXHR9XG5cblx0aWYgKCFmYWlsQmFjayB8fCB0eXBlb2YgZmFpbEJhY2sgIT09ICdzdHJpbmcnIHx8IGZhaWxCYWNrIGluIGNvbnNvbGUpXG5cdHtcblx0XHR0aHJvdyBUeXBlRXJyb3IoYGZhaWxCYWNrIGlzIG5vdCBhbGxvdyBpbiB0YXJnZXQgY29uc29sZWApXG5cdH1cblxuXHQvLyBAdHMtaWdub3JlXG5cdGlmICh0eXBlb2YgY29uc29sZS5fbG9nICE9PSAnZnVuY3Rpb24nKVxuXHR7XG5cdFx0dGhyb3cgVHlwZUVycm9yKGBpbnB1dCBjb25zb2xlIG5vdCBhIENvbnNvbGUyIGxpa2Ugb2JqZWN0YClcblx0fVxuXG5cdHJldHVybiBmdW5jdGlvbiBjaGFsa1N0eWxlTG9nKC4uLmFyZ3YpXG5cdHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIGNvbnNvbGUuX2xvZyhuYW1lLCBhcmd2LCBmYWlsQmFjaylcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzQ29uc29sZVN0cmVhbSh0YXJnZXQ6IElDb25zb2xlV2l0aFN0cmVhbTxvYmplY3Q+KVxue1xuXHRyZXR1cm4gISEodGFyZ2V0Ll9zdGRvdXQgJiYgdGFyZ2V0Ll9zdGRlcnIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4vdXRpbCcpO1xuIl19